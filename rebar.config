%%-*- mode: erlang -*-
%% vi:ft=erlang

%% == Options for erlang compiler

{erl_opts, [
    {src_dirs, ["src"]},
    %{parse_transform, lager_transform},
    %{d, multi_logger, true},
    warn_unused_vars,
    %warnings_as_errors,
    warn_export_all,
    warn_shadow_vars,
    warn_unused_import,
    warn_unused_function,
    warn_bif_clash,
    warn_unused_record,
    warn_deprecated_function,
    warn_obsolete_guard,
    strict_validation,
    warn_export_vars,
    warn_exported_vars,
    %warn_missing_spec,
    %warn_untyped_record,
    debug_info
]}.

{sub_dirs, ["rel"]}.

{clean_files, [
    "erl_crash.dump",
    "doc/*.html",
    "doc/erlang.png",
    "doc/edoc-info",
    "doc/stylesheet.css"
]}.


%% == Dependencies ==

%% Where to put any downloaded dependencies. Default is `deps'
{deps_dir, ["deps"]}.

%% What dependencies we have, dependencies can be of 3 forms, an application
%% name as an atom, eg. mochiweb, a name and a version (from the .app file), or
%% an application name, a version and the SCM details on how to fetch it (SCM
%% type, location and revision). Rebar currently support git, hg, bzr and svn.
{deps, []}.


%% == xref ==

{xref_warnings, true}.

%% optional extra paths to include in xref:set_library_path/2.
%% specified relative location of rebar.config.
%% e.g. {xref_extra_paths,["../gtknode/src"]}
{xref_extra_paths, []}.

%% xref checks to run
{xref_checks, [
    undefined_function_calls,
    undefined_functions,
    locals_not_used,
    deprecated_function_calls,
    deprecated_functions
]}.

%% Optional custom xref queries (xref manual has details) specified as
%%     {xref_queries, [{query_string(), expected_query_result()},...]}
%% The following for example removes all references to mod:*foo/4
%% functions from undefined external function calls as those are in a
%% generated module
{xref_queries, []}.


%% == Common Test ==

{ct_compile_opts, [
    warn_unused_vars,
    warn_export_all,
    warn_shadow_vars,
    warn_unused_import,
    warn_unused_function,
    warn_bif_clash,
    warn_unused_record,
    warn_deprecated_function,
    warn_obsolete_guard,
    strict_validation,
    warn_export_vars,
    warn_exported_vars,
    warn_missing_spec,
    warn_untyped_record,
    debug_info
]}.

{ct_opts, []}.

{ct_extra_params, "-no_auto_compile -dir ebin -logdir log/ct --erl_args -smp enable -boot start_sasl"}.

%% == Cover ==

{cover_enabled, true}.

{cover_opts, [
    verbose
]}.


%% == EDoc ==

{edoc_opts, [
    {source_path, ["src"]},
    {index_columns, 1},
    {sort_functions, false},
    {preprocess, true},
    {report_missing_types, true},
    {todo, true},
    {packages, false},
    {subpackages, false}
]}.


%% == Dialyzer ==

{dialyzer, [
    {plt_location, local},
    {plt_apps, top_level_deps},
    {plt_extra_apps, [crypto, eunit]},
    {base_plt_apps, [stdlib]},
    {base_plt_location, global},
    {warnings, [
        error_handling,
        race_conditions,
        %underspecs,
        unknown,
        unmatched_returns
    ]}
]}.
